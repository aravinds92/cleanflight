
Memory Configuration

Name             Origin             Length             Attributes
FLASH            0x0000000008000000 0x000000000001f000 xr
FLASH_CONFIG     0x000000000801f000 0x0000000000001000 r
RAM              0x0000000020000000 0x0000000000005000 xrw
MEMORY_B1        0x0000000060000000 0x0000000000000000 xr
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/libm.a
LOAD /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/libc.a
START GROUP
LOAD /usr/lib/gcc/x86_64-linux-gnu/5/libgcc.a
LOAD /usr/lib/gcc/x86_64-linux-gnu/5/libgcc_eh.a
LOAD /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/libc.a
END GROUP
                0x0000000020005000                _estack = (ORIGIN (RAM) + LENGTH (RAM))
                0x000000000801f000                __config_start = (ORIGIN (FLASH) + LENGTH (FLASH))
                0x0000000008020000                __config_end = (ORIGIN (FLASH_CONFIG) + LENGTH (FLASH_CONFIG))
                0x0000000000000000                _Min_Heap_Size = 0x0
                0x0000000000000400                _Min_Stack_Size = 0x400

.isr_vector     0x0000000008000000        0x0
                0x0000000008000000                . = ALIGN (0x4)
                [!provide]                        PROVIDE (isr_vector_table_base, .)
 *(.isr_vector)
                0x0000000008000000                . = ALIGN (0x4)

.text           0x0000000008000000        0x0
                0x0000000008000000                . = ALIGN (0x4)
 *(.text)
 *(.text*)
 *(.rodata)
 *(.rodata*)
 *(.glue_7)
 *(.glue_7t)
 *(.eh_frame)
 *(.init)
 *(.fini)
                0x0000000008000000                . = ALIGN (0x4)
                0x0000000008000000                _etext = .

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)

.ARM            0x0000000008000000        0x0
                0x0000000008000000                __exidx_start = .
 *(.ARM.exidx*)
                0x0000000008000000                __exidx_end = .

.preinit_array  0x0000000008000000        0x0
                [!provide]                        PROVIDE (__preinit_array_start, .)
 *(.preinit_array*)
                [!provide]                        PROVIDE (__preinit_array_end, .)

.init_array     0x0000000008000000        0x0
                [!provide]                        PROVIDE (__init_array_start, .)
 *(SORT(.init_array.*))
 *(.init_array*)
                [!provide]                        PROVIDE (__init_array_end, .)

.fini_array     0x0000000008000000        0x0
                [!provide]                        PROVIDE (__fini_array_start, .)
 *(.fini_array*)
 *(SORT(.fini_array.*))
                [!provide]                        PROVIDE (__fini_array_end, .)

.pg_registry    0x0000000008000000        0x0
                [!provide]                        PROVIDE (__pg_registry_start, .)
 *(.pg_registry)
 *(SORT(.pg_registry.*))
                [!provide]                        PROVIDE (__pg_registry_end, .)

.pg_resetdata   0x0000000008000000        0x0
                [!provide]                        PROVIDE (__pg_resetdata_start, .)
 *(.pg_resetdata)
                [!provide]                        PROVIDE (__pg_resetdata_end, .)
                0x0000000008000000                _sidata = .

.data           0x0000000020000000        0x0 load address 0x0000000008000000
                0x0000000020000000                . = ALIGN (0x4)
                0x0000000020000000                _sdata = .
 *(.data)
 *(.data*)
                0x0000000020000000                . = ALIGN (0x4)
                0x0000000020000000                _edata = .
                0x0000000020000000                . = ALIGN (0x4)

.bss            0x0000000020000000        0x0 load address 0x0000000008000000
                0x0000000020000000                _sbss = .
                0x0000000020000000                __bss_start__ = _sbss
 *(.bss)
 *(SORT(.bss*))
 *(COMMON)
                0x0000000020000000                . = ALIGN (0x4)
                0x0000000020000000                _ebss = .
                0x0000000020000000                __bss_end__ = _ebss

._user_heap_stack
                0x0000000020000000      0x400 load address 0x0000000008000000
                0x0000000020000000                . = ALIGN (0x4)
                [!provide]                        PROVIDE (end, .)
                [!provide]                        PROVIDE (_end, .)
                0x0000000020000000                . = (. + _Min_Heap_Size)
                0x0000000020000400                . = (. + _Min_Stack_Size)
 *fill*         0x0000000020000000      0x400 
                0x0000000020000400                . = ALIGN (0x4)

.memory_b1_text
 *(.mb1text)
 *(.mb1text*)
 *(.mb1rodata)
 *(.mb1rodata*)

/DISCARD/
 libc.a(*)
 libm.a(*)
 libgcc.a(*)

.ARM.attributes
 *(.ARM.attributes)
OUTPUT(obj/main/cleanflight_NAZE.elf elf64-x86-64)

Cross Reference Table

Symbol                                            File
No symbols
