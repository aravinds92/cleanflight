docs/development/CodingStyle.md:256:It should be based on sound mathematical, physical or computer science principles rather than just heuristics.
docs/Failsafe.md:98:Time throttle level must have been below 'min_throttle' to _only disarm_ instead of _full failsafe procedure_.
docs/PID tuning.md:125:`gyro_lpf` sets the hardware gyro low pass filter value. If 0 or 256 the gyro uses the least hardware filtering available (256Hz) and the internal sampling rate is the fastest possible (8kHz) with the least possible delay. The lower the number the stronger the filtering. Stronger filtering reduces noise in the gyro signal before that data gets into the PID calculations. Stronger filtering adds delays that can be associated with wobble and reduced responsiveness. Filtering is needed because motor/frame noise can cause overheating of motors especially when amplified by Dterm in quads with low mass and fast braking ESCs. If 188 or lower are chosen, the gyro sampling is internally at 1kHz and delays are greater. Faster sampling is good because things are slightly more responsive but can cause aliasing noise. Setting to 188 allows syncing of the FC to the gyro at 1kHz (if `gyro_sync` is enabled and available in the code) which reduces aliasing a lot.
docs/Profiles.md:27:Rate profiles contain settings that adjust how your craft behaves based on control input.
file_list/src_files:73:config_unittest.h
file_list/src_files:327:mavlink_msg_autopilot_version_request.h
file_list/src_files:452:mavlink_msg_log_request_list.h
file_list/src_files:463:mavlink_msg_mission_request.h
file_list/src_files:464:mavlink_msg_mission_request_list.h
file_list/src_files:465:mavlink_msg_mission_request_partial_list.h
file_list/src_files:467:mavlink_msg_mission_write_partial_list.h
file_list/src_files:474:mavlink_msg_param_request_list.h
file_list/src_files:512:mavlink_msg_terrain_request.h
file_list/src_files:568:mavlink_msg_point_of_interest.h
file_list/src_files:610:test.h
LICENSE:458:licenses to the work the party's predecessor in interest had or could
src/main/blackbox/blackbox.c:1064:            // The first header is a field name
src/main/blackbox/blackbox.c:1086:            // The first header is a field name
src/main/common/colorconversion.c:27:rgbColor24bpp_t hsvToRgb24(const hsvColor_t* c)
src/main/common/colorconversion.h:19:rgbColor24bpp_t hsvToRgb24(const hsvColor_t *c);
src/main/drivers/compass_hmc5883l.c:125:static const hmc5883Config_t *hmc5883Config = NULL;
src/main/drivers/compass_hmc5883l.c:173:bool hmc5883lDetect(mag_t* mag, const hmc5883Config_t *hmc5883ConfigToUse)
src/main/drivers/compass_hmc5883l.h:35:bool hmc5883lDetect(mag_t* mag, const hmc5883Config_t *hmc5883ConfigToUse);
src/main/drivers/light_ws2811strip.c:46:void setLedHsv(int index, const hsvColor_t *color)
src/main/drivers/light_ws2811strip.c:66:void setStripColor(const hsvColor_t *color)
src/main/drivers/light_ws2811strip.c:72:void setStripColors(const hsvColor_t *colors)
src/main/drivers/light_ws2811strip.h:38:void setLedHsv(int index, const hsvColor_t *color);
src/main/drivers/light_ws2811strip.h:44:void setStripColor(const hsvColor_t *color);
src/main/drivers/light_ws2811strip.h:45:void setStripColors(const hsvColor_t *colors);
src/main/drivers/light_ws2811strip_stm32f10x.c:101:    const hsvColor_t hsv_white = {  0, 255, 255};
src/main/drivers/light_ws2811strip_stm32f30x.c:116:    const hsvColor_t hsv_white = {  0, 255, 255};
src/main/drivers/pwm_mapping.c:673:static const uint16_t * const hardwareMaps[] = {
src/main/flight/failsafe.h:35:    uint16_t failsafe_throttle_low_delay;   // Time throttle stick must have been below 'min_check' to "JustDisarm" instead of "full failsafe procedure".
src/main/flight/failsafe.h:65:    uint32_t throttleLowPeriod;             // throttle stick must have been below 'min_check' for this period
src/main/flight/pid_luxfloat.c:52:#include "config/config_unittest.h"
src/main/flight/pid_mw23.c:34:#include "config/config_unittest.h"
src/main/flight/pid_mwrewrite.c:50:#include "config/config_unittest.h"
src/main/io/asyncfatfs/asyncfatfs.c:3310:                            // This is the best hole there can be
src/main/io/ledstrip.c:99:const hsvColor_t hsv[] = {
src/main/io/ledstrip.c:555:static void applyLedHsv(uint32_t mask, const hsvColor_t *color)
src/main/io/ledstrip.c:594:        const hsvColor_t *warningColor = NULL;
src/main/io/ledstrip.c:700:    const hsvColor_t *gpsColor;
src/main/io/ledstrip.c:741:    const hsvColor_t *flashColor = &HSV(ORANGE); // TODO - use user color?
src/main/io/ledstrip.c:808:                const hsvColor_t *ringColor = colors(ledGetColor(ledConfig));
src/main/io/serial.c:240:                // some other bit must have been set.
src/main/mavlink/ardupilotmega/ardupilotmega.h:378:#include "./mavlink_msg_autopilot_version_request.h"
src/main/mavlink/ardupilotmega/testsuite.h:709:static void mavlink_test_hwstatus(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/ardupilotmega/testsuite.h:2527:	mavlink_test_hwstatus(system_id, component_id, last_msg);
src/main/mavlink/common/common.h:666:#include "./mavlink_msg_param_request_list.h"
src/main/mavlink/common/common.h:682:#include "./mavlink_msg_mission_request_partial_list.h"
src/main/mavlink/common/common.h:683:#include "./mavlink_msg_mission_write_partial_list.h"
src/main/mavlink/common/common.h:685:#include "./mavlink_msg_mission_request.h"
src/main/mavlink/common/common.h:688:#include "./mavlink_msg_mission_request_list.h"
src/main/mavlink/common/common.h:740:#include "./mavlink_msg_log_request_list.h"
src/main/mavlink/common/common.h:756:#include "./mavlink_msg_terrain_request.h"
src/main/mavlink/common/testsuite.h:27:static void mavlink_test_heartbeat(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:3124:static void mavlink_test_hil_state(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:3182:static void mavlink_test_hil_controls(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:3235:static void mavlink_test_hil_rc_inputs_raw(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:3534:static void mavlink_test_highres_imu(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:3645:static void mavlink_test_hil_sensor(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:3948:static void mavlink_test_hil_gps(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:4003:static void mavlink_test_hil_optical_flow(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:4057:static void mavlink_test_hil_state_quaternion(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/common/testsuite.h:5735:	mavlink_test_heartbeat(system_id, component_id, last_msg);
src/main/mavlink/common/testsuite.h:5798:	mavlink_test_hil_state(system_id, component_id, last_msg);
src/main/mavlink/common/testsuite.h:5799:	mavlink_test_hil_controls(system_id, component_id, last_msg);
src/main/mavlink/common/testsuite.h:5800:	mavlink_test_hil_rc_inputs_raw(system_id, component_id, last_msg);
src/main/mavlink/common/testsuite.h:5806:	mavlink_test_highres_imu(system_id, component_id, last_msg);
src/main/mavlink/common/testsuite.h:5808:	mavlink_test_hil_sensor(system_id, component_id, last_msg);
src/main/mavlink/common/testsuite.h:5814:	mavlink_test_hil_gps(system_id, component_id, last_msg);
src/main/mavlink/common/testsuite.h:5815:	mavlink_test_hil_optical_flow(system_id, component_id, last_msg);
src/main/mavlink/common/testsuite.h:5816:	mavlink_test_hil_state_quaternion(system_id, component_id, last_msg);
src/main/mavlink/minimal/testsuite.h:27:static void mavlink_test_heartbeat(uint8_t system_id, uint8_t component_id, mavlink_message_t *last_msg)
src/main/mavlink/minimal/testsuite.h:77:	mavlink_test_heartbeat(system_id, component_id, last_msg);
src/main/mavlink/pixhawk/pixhawk.h:150:#include "./mavlink_msg_point_of_interest.h"
src/main/mavlink/test/mavlink.h:25:#include "test.h"
src/main/scheduler/scheduler.c:33:#include "config/config_unittest.h"
src/main/sensors/initialisation.c:564:    const hmc5883Config_t *hmc5883Config = 0;
src/main/sensors/initialisation.c:567:    static const hmc5883Config_t nazeHmc5883Config_v1_v4 = {
src/main/sensors/initialisation.c:576:    static const hmc5883Config_t nazeHmc5883Config_v5 = {
src/main/sensors/initialisation.c:590:    static const hmc5883Config_t spRacingF3Hmc5883Config = {
src/main/target/ALIENFLIGHTF3/hardware_revision.c:31:static const char * const hardwareRevisionNames[] = {
src/main/target/CJMCU/hardware_revision.c:34:static const char * const hardwareRevisionNames[] = {
src/main/target/NAZE/hardware_revision.c:36:static const char * const hardwareRevisionNames[] = {
src/main/telemetry/hott.c:103:static uint32_t lastHoTTRequestCheckAt = 0;
src/main/telemetry/hott.c:415:        lastHoTTRequestCheckAt = currentMicros;
src/main/telemetry/hott.c:419:        bool enoughTimePassed = currentMicros - lastHoTTRequestCheckAt >= HOTT_RX_SCHEDULE;
src/main/telemetry/smartport.c:150:    static uint8_t lastChar;
src/main/telemetry/smartport.c:151:    if (lastChar == FSSP_START_STOP) {
src/main/telemetry/smartport.c:160:    lastChar = c;
src/test/Makefile:73:# All Google Test headers.  Usually you shouldn't change this
src/test/mock/mock_flash.cc:25:#include "gtest/gtest.h"
src/test/mock/mock_system.cc:26:#include "gtest/gtest.h"
src/test/unit/alignsensor_unittest.cc:32:#include "gtest/gtest.h"
src/test/unit/baro_bmp085_unittest.cc:56:#include "gtest/gtest.h"
src/test/unit/baro_bmp280_unittest.cc:48:#include "gtest/gtest.h"
src/test/unit/baro_ms5611_unittest.cc:32:#include "gtest/gtest.h"
src/test/unit/battery_unittest.cc:35:#include "gtest/gtest.h"
src/test/unit/battery_unittest.cc:174:            EXPECT_GE(diff, serviceInterval); // service interval must have passed
src/test/unit/common_filter_unittest.cc:30:#include "gtest/gtest.h"
src/test/unit/config_eeprom_unittest.cc:199:#include "gtest/gtest.h"
src/test/unit/config_streamer_unittest.cc:26:#include "gtest/gtest.h"
src/test/unit/encoding_unittest.cc:24:#include "gtest/gtest.h"
src/test/unit/flight_altitudehold_unittest.cc:70:#include "gtest/gtest.h"
src/test/unit/flight_failsafe_unittest.cc:53:#include "gtest/gtest.h"
src/test/unit/flight_imu_unittest.cc:71:#include "gtest/gtest.h"
src/test/unit/flight_mixer_unittest.cc:71:#include "gtest/gtest.h"
src/test/unit/flight_pid_unittest.cc:43:    #include "config/config_unittest.h"
src/test/unit/flight_pid_unittest.cc:50:#include "gtest/gtest.h"
src/test/unit/gps_conversion_unittest.cc:29:#include "gtest/gtest.h"
src/test/unit/io_serial_unittest.cc:35:#include "gtest/gtest.h"
src/test/unit/ledstrip_unittest.cc:51:#include "gtest/gtest.h"
src/test/unit/ledstrip_unittest.cc:326:    const hsvColor_t expectedColors[TEST_COLOR_COUNT] = {
src/test/unit/ledstrip_unittest.cc:383:void setLedHsv(int index, const hsvColor_t *color) {
src/test/unit/ledstrip_unittest.cc:399:void setStripColor(const hsvColor_t *color) {
src/test/unit/ledstrip_unittest.cc:403:void setStripColors(const hsvColor_t *colors) {
src/test/unit/maths_unittest.cc:32:#include "gtest/gtest.h"
src/test/unit/msp_fc_unittest.cc:91:#include "gtest/gtest.h"
src/test/unit/msp_serial_unittest.cc:57:#include "gtest/gtest.h"
src/test/unit/osd_screen_unittest.cc:77:#include "gtest/gtest.h"
src/test/unit/osd_screen_unittest.cc:116:    char testChar = ' ';
src/test/unit/osd_screen_unittest.cc:117:    uint8_t expectedMappedChar = font_test_asciiToFontMapping[(uint8_t)testChar];
src/test/unit/osd_screen_unittest.cc:120:    osdSetCharacterAtPosition(0, 0, testChar);
src/test/unit/osd_screen_unittest.cc:130:    char testChar = ' ';
src/test/unit/osd_screen_unittest.cc:131:    uint8_t expectedMappedChar = font_test_asciiToFontMapping[(uint8_t)testChar];
src/test/unit/osd_screen_unittest.cc:134:    osdSetCharacterAtPosition(TEST_COLUMN_COUNT - 1, -1, testChar); // -1 on Y axis indicates bottom justified.
src/test/unit/rc_controls_unittest.cc:59:#include "gtest/gtest.h"
src/test/unit/rx_ranges_unittest.cc:35:#include "gtest/gtest.h"
src/test/unit/rx_rx_unittest.cc:45:#include "gtest/gtest.h"
src/test/unit/scheduler_unittest.cc:27:#include "gtest/gtest.h"
src/test/unit/sonar_unittest.cc:31:#include "gtest/gtest.h"
src/test/unit/telemetry_hott_unittest.cc:60:#include "gtest/gtest.h"
src/test/unit/type_conversion_unittest.cc:28:#include "gtest/gtest.h"
src/test/unit/voltage_unittest.cc:41:#include "gtest/gtest.h"
src/test/unit/ws2811_unittest.cc:34:#include "gtest/gtest.h"
src/test/unit/ws2811_unittest.cc:90:rgbColor24bpp_t hsvToRgb24(const hsvColor_t *c) {
